q1
.data
    prompt1:    .asciiz "Enter the first string: "
    prompt2:    .asciiz "Enter the second string: "
    buffer1:    .space 100    # Space for first string (max 100 chars)
    buffer2:    .space 100    # Space for second string (max 100 chars)

.text
    .globl main

# Main program
main:
    # Read the first string
    li $v0, 4                  # Syscall for print string
    la $a0, prompt1             # Load prompt1 address
    syscall
    
    jal read_string             # Read first string into buffer1
    
    # Read the second string
    li $v0, 4                  # Syscall for print string
    la $a0, prompt2             # Load prompt2 address
    syscall
    
    jal read_string2          

    # Compare the strings
    jal compare_strings
    
    # Print the numerical result
    move $a0, $v0             
    jal print_result

    # Exit program
    li $v0, 10                
    syscall

# Procedure to read the first string
read_string:
    la $a0, buffer1            
    li $a1, 100                
    li $v0, 8                  
    syscall
    jr $ra                     

# Procedure to read the second string
read_string2:
    la $a0, buffer2            
    li $a1, 100                
    li $v0, 8                  
    syscall
    jr $ra                     

# Procedure to compare the strings lexicographically
compare_strings:
    la $t0, buffer1            
    la $t1, buffer2            
    li $v0, 0                  

compare_loop:
    lb $a0, 0($t0)             
    lb $a1, 0($t1)             
    beq $a0, $zero, check_end  
    beq $a1, $zero, check_end 
    bne $a0, $a1, set_result  
    
    addi $t0, $t0, 1          
    addi $t1, $t1, 1          
    j compare_loop            

check_end:
    beq $a0, $a1, end_compare 
    bne $a0, $zero, set_gt 
    bne $a1, $zero, set_lt 

set_result:
    blt $a0, $a1, set_lt 
    bgt $a0, $a1, set_gt 

set_lt:
    li $v0, -1         
    j end_compare

set_gt:
    li $v0, 1          
    j end_compare

end_compare:
    jr $ra             

# Procedure to print the numerical result
print_result:
    li $v0, 1          
    syscall
    jr $ra             







q2
not done








q3
.data
buffer:      .space 256                # Reserve space for user input string
counts:      .space 104                # Space for 26 integers (4 bytes each)
new_line:    .asciiz "\n"              # New line for formatting
prompt:      .asciiz "Enter a string: " # Prompt for user input

.text
.globl main

main:
    # Prompt user for input
    li $v0, 4                  # Print string syscall
    la $a0, prompt             # Address of prompt message
    syscall

    # Read input string
    li $v0, 8                  # Read string syscall
    la $a0, buffer             # Address of buffer
    li $a1, 256                # Max bytes to read
    syscall

    # Initialize
    la $t0, buffer             # Load address of the input string
    la $t1, counts             # Load address of counts array

    # Clear the counts array
    li $t2, 0
    li $t3, 26
clear_counts:
    sw $t2, 0($t1)             # Set count to 0
    addi $t1, $t1, 4           # Move to next count
    addi $t3, $t3, -1
    bnez $t3, clear_counts    # Repeat until all counts cleared

    # Count occurrences
    la $t0, buffer             # Reload address of the input string
    la $t1, counts             # Reload address of counts array

count_loop:
    lb $t4, 0($t0)             # Load a byte from the string
    beqz $t4, print_counts     # End of string, go to print counts

    # Check if character is lowercase letter
    li $t5, 'a'
    li $t6, 'z'
    blt $t4, $t5, count_next
    bgt $t4, $t6, count_next

    # Update the count for the character
    sub $t7, $t4, $t5          # Index in counts array
    sll $t7, $t7, 2            # Multiply by 4 (size of integer)
    add $t7, $t7, $t1          # Address of the count
    lw $t8, 0($t7)             # Load current count
    addi $t8, $t8, 1           # Increment count
    sw $t8, 0($t7)             # Store updated count
    
count_next:
    addi $t0, $t0, 1           # Next character
    j count_loop               # Repeat loop

    # Print counts
print_counts:
    li $t9, 0                  # Initialize counter for letters
    la $t0, counts             # Load address of counts array

print_loop:
    bge $t9, 26, exit         # Done with all letters, exit
    lw $t4, 0($t0)             # Load the count
    beqz $t4, skip_print       # Skip if count is 0

    # Print the letter
    li $a0, 0
    li $v0, 11                 # Print character syscall
    addi $a0, $t9, 'a'         # Convert index to character
    syscall

    # Print the count
    move $a0, $t4              # Load count to print
    li $v0, 1                  # Print integer syscall
    syscall

    # Print newline
    li $v0, 4                  # Print string syscall
    la $a0, new_line
    syscall

skip_print:
    addi $t0, $t0, 4           # Move to next count
    addi $t9, $t9, 1           # Next letter
    j print_loop               # Repeat loop

exit:
    li $v0, 10                 # Exit syscall
    syscall








q4

.data
    prompt:      .asciiz "Enter the value of n: "
    newline:     .asciiz "\n"
    fib_msg:     .asciiz "Fibonacci sequence: "
    error_msg:   .asciiz "Error: Invalid input. Please enter a non-negative integer.\n"

.text
main:
    # Print prompt and read the value of n
    li $v0, 4               # syscall for print string
    la $a0, prompt          # address of the prompt string
    syscall
    
    li $v0, 5               # syscall for read integer
    syscall
    move $t0, $v0           # save the input value of n into $t0

    # Validate input
    blt $t0, $zero, error   # if n < 0, print error message and exit
    bgt $t0, 46, error      # if n > 46, print error message and exit (to avoid overflow)

    # Print Fibonacci sequence message
    li $v0, 4               # syscall for print string
    la $a0, fib_msg         # address of the Fibonacci sequence message
    syscall
    
    # Initialize loop variables
    li $t1, 0               # initialize counter to 0
    li $t2, 0               # initialize fib(0) to 0
    li $t3, 1               # initialize fib(1) to 1

print_fib_sequence:
    bge $t1, $t0, end_program # if counter >= n, end program
    move $a0, $t2           # set $a0 = fib(i)
    
    li $v0, 1               # syscall for print integer
    syscall
    
    # Print newline after each number
    li $v0, 4               # syscall for print string
    la $a0, newline         # address of the newline string
    syscall
    
    # Calculate next Fibonacci number
    add $t4, $t2, $t3       # fib(i+1) = fib(i) + fib(i-1)
    move $t2, $t3           # update fib(i) to fib(i-1)
    move $t3, $t4           # update fib(i-1) to fib(i+1)
    
    # Increment counter and loop
    addi $t1, $t1, 1        # increment counter
    j print_fib_sequence    # jump to print_fib_sequence

end_program:
    li $v0, 10              # syscall to exit
    syscall

error:
    li $v0, 4               # syscall for print string
    la $a0, error_msg       # address of the error message
    syscall
    j end_program           # exit program